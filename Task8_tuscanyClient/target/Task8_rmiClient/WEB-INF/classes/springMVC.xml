<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd">
    <!--此文件负责整个mvc中的配置-->

    <!--启用spring的一些annotation -->
    <context:annotation-config/>

    <!-- 配置注解驱动 可以将request参数与绑定到controller参数上,快速注册handlerMapper和handlerAdapter -->
    <mvc:annotation-driven/>

    <!--静态资源映射-->
    <!--本项目把静态资源放在了webapp的statics目录下，资源映射如下-->
    <mvc:resources mapping="/css/**" location="WEB-INF/statics/css/"/>
    <mvc:resources mapping="/js/**" location="WEB-INF/statics/js/"/>
    <mvc:resources mapping="/imges/**" location="WEB-INF/statics/imges/"/>
    <mvc:resources mapping="/jsp/**" location="WEB-INF/statics/jsp/"/>
    <mvc:resources mapping="/tiles/**" location="WEB-INF/tiles/"></mvc:resources>
    <mvc:resources mapping="/mytaglib" location="WEB-INF/tlds/"></mvc:resources>

    <!--tiles的视图解析器。其中的layout.xml即为前文所建立的布局配置文件，p:order="1"表示优先级，数字越小，解析器的优先级越高-->
    <bean id="tilesViewResolver" class="org.springframework.web.servlet.view.tiles3.TilesViewResolver" p:order="1"/>
    <bean id="tilesConfigurer" class="org.springframework.web.servlet.view.tiles3.TilesConfigurer">
        <property name="definitions">
            <list>
                <value>classpath:layout.xml</value>
            </list>
        </property>
    </bean>
    <!-- 对模型视图名称的解析，即在模型视图名称添加前后缀(如果最后一个还是表示文件夹,则最后的斜杠不要漏了) 使用JSP-->
    <!-- 默认的视图解析器,在上边的解析错误时使用 (默认使用html)- -->
    <bean id="defaultViewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
        <property name="prefix" value="/WEB-INF/statics/jsp/"/><!--设置JSP文件的目录位置-->
        <property name="suffix" value=".jsp"/>
        <property name="exposeContextBeansAsAttributes" value="true"/>
    </bean>

    <mvc:interceptors>
        <!-- 使用bean定义一个Interceptor，直接定义在mvc:interceptors根下面的Interceptor将拦截所有的请求 -->
        <mvc:interceptor>
            <mvc:mapping path="/page/u/**"/>
            <!-- <mvc:exclude-mapping path="/page/u/profession"></mvc:exclude-mapping>
            <mvc:exclude-mapping path="/page/u/homepage"></mvc:exclude-mapping>-->
            <!-- 定义在mvc:interceptor下面的表示是对特定的请求才进行拦截的 -->
            <bean class="com.jnshu.util.LoginHandlerInterceptor"/>
        </mvc:interceptor>
        <!-- 也可以配置第二个拦截器-->
    </mvc:interceptors>


    <!-- 自动扫描装配 -->
    <context:component-scan base-package="com.jnshu.controller"/>
</beans>